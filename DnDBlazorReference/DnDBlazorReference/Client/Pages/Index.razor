@page "/"

@using System
@using DnDBlazorReference.Shared
@using DnDBlazorReference.Shared.Models
@using DnDBlazorReference.Shared.Models.FiveETools
@using DnDBlazorReference.Client.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@using Tewr.Blazor.FileReader
@using DnDBlazorReference.Shared.Models.BinaricPox

@inject DataStorage DataStore
@inject HttpClient Http
@inject IFileReaderService FileReaderService

@if (!DataStore.IsLoaded)
{
    <div>
        <div>
            <h3>Load Initial State Data</h3>
            <input type="file" @ref="_stateFile" accept=".json" @onchange="ProcessInitialStateFile" />
        </div>
    </div>
}
else
{
    <div>
        <div>
            <h3>Load 5e Tools Data</h3>
            <input type="file" @ref="_monster5eFiles" accept=".json" @onchange="ProcessFilesIntoMonsters" />
        </div>
    </div>

    <div>
        <div>
            <h3>Load Card Data</h3>
            <input type="file" @ref="_monsterRefFile" accept=".tsv" @onchange="ProcessTSVFilesIntoMonsterRef" />
        </div>
    </div>
}

<div>
    <b>State:</b> <span>@_processingState</span>
</div>
@if (errorLines != null && errorLines.Length > 0)
{
    <div>
        <b>Error:</b>
        @foreach (string str in errorLines)
        {
            <div>@str</div>
        }
    </div>
}

@code {

    private DataStorage.Monster5eJson monster5eJson;

    private ElementReference _stateFile;
    private ElementReference _monster5eFiles;
    private ElementReference _monsterRefFile;

    private string _processingState;
    private string[] errorLines = new string[0];


    public async void ProcessInitialStateFile()
    {
        _processingState = "Starting ...";
        StateHasChanged();

        foreach (var file in await FileReaderService.CreateReference(_stateFile).EnumerateFilesAsync())
        {
            if (file == null)
            {
                continue;
            }

            await DataStore.ProcessFile(file);
        }

        _processingState = "Done";
        StateHasChanged();
    }

    public async void ProcessFilesIntoMonsters()
    {
        _processingState = "Starting ...";
        StateHasChanged();

        foreach (var file in await FileReaderService.CreateReference(_monster5eFiles).EnumerateFilesAsync())
        {
            if (file == null)
            {
                continue;
            }

            await DataStore.Process5eFile(file);

            var info = await file.ReadFileInfoAsync();
            _processingState = $"Done [{info.Name}]";
        }

        StateHasChanged();
    }

    public async void ProcessTSVFilesIntoMonsterRef()
    {
        _processingState = "Starting ...";
        StateHasChanged();

        foreach (var file in await FileReaderService.CreateReference(_monsterRefFile).EnumerateFilesAsync())
        {
            if (file == null)
            {
                continue;
            }

            errorLines = (await DataStore.ProcessTSVFile(file)).Split("\n");

            var info = await file.ReadFileInfoAsync();
            _processingState = $"Done [{info.Name}]";
        }

        StateHasChanged();
    }
}
