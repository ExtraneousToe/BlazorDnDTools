@namespace DnDBlazorReference.Client.Shared.Monsters

@using System.Linq
@using DnDBlazorReference.Client.Data
@using DnDBlazorReference.Shared.Models.BinaricPox

@inject DataStorage DataStore
@inject HttpClient Http

<MonsterSearchFilter FilterBlock="@FilterBlock" OnFilterBlockChanged="OnFilterBlockChanged" />

<div class="flex-row d-flex">
    @{
        int index = 0;
        <span class="list-header elist-column @GetColumnClass(index++)">Name [@DataStore.Monsters.Count]</span>
        <span class="list-header elist-column @GetColumnClass(index++)">Type</span>
        <span class="list-header elist-column @GetColumnClass(index++)">Source</span>
        <span class="list-header elist-column @GetColumnClass(index++)">Reference Size</span>
    }
</div>

<ElementList>
    @{
        foreach (var monsterItem in DisplayMonster)
        {
            var monster = monsterItem;
            <MonsterListItem Monster="monster" OnSelectedItem="OnItemSelected" ColumnClasses="ColumnClasses" />
        }
    }
</ElementList>

@code {
    [Parameter]
    public EventCallback<Monster> OnItemSelected { get; set; }

    public FilterBlock FilterBlock { get; set; } = new FilterBlock();

    //private string _nameSearch;
    //public string NameSearch
    //{
    //    get => _nameSearch;
    //    set
    //    {
    //        bool diff = _nameSearch != value;

    //        _nameSearch = value;

    //        if (diff)
    //        {
    //            RebuildList();
    //        }
    //    }
    //}

    //private string _srcSearch;
    //public string SrcSearch
    //{
    //    get => _srcSearch;
    //    set
    //    {
    //        bool diff = _srcSearch != value;

    //        _srcSearch = value;

    //        if (diff)
    //        {
    //            RebuildList();
    //        }
    //    }
    //}
    //private string _typeSearch;
    //public string TypeSearch
    //{
    //    get => _typeSearch;
    //    set
    //    {
    //        bool diff = _typeSearch != value;

    //        _typeSearch = value;

    //        if (diff)
    //        {
    //            RebuildList();
    //        }
    //    }
    //}
    private List<Monster> DisplayMonster { get; set; }

    private string[] ColumnClasses = new string[] { "", "", "", "" };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DisplayMonster = new List<Monster>(DataStore.SortedMonsters);
    }

    private void OnFilterBlockChanged(FilterBlock aFilterBlock)
    {
        FilterBlock = aFilterBlock;
        RebuildList();
    }

    private void RebuildList()
    {
        DisplayMonster = DataStore.SortedMonsters
            .Where(
                mon =>
                {
                    bool state = true;

                    state &= (string.IsNullOrEmpty(FilterBlock.Name) || mon.Name.ToLower().Contains(FilterBlock.Name.ToLower()));
                    state &= (string.IsNullOrEmpty(FilterBlock.Source) || mon.PrimarySource.ToLower().Contains(FilterBlock.Source.ToLower()));
                    state &= (string.IsNullOrEmpty(FilterBlock.CreatureType) || mon.CreatureTypeRef.ToLower().Contains(FilterBlock.CreatureType.ToLower()));

                    return state;
                }
            )
            .ToList();


        StateHasChanged();
    }

    private string GetColumnClass(int index)
    {
        if (ColumnClasses == null || index > ColumnClasses.Length) return string.Empty;

        return ColumnClasses[index];
    }
}
