@namespace DnDBlazorReference.Client.Shared.Monsters

@using System.Linq
@using DnDBlazorReference.Client.Data
@using DnDBlazorReference.Shared.Models.BinaricPox

@inject DataStorage DataStore
@inject HttpClient Http

<CascadingValue Value=this>
    <MonsterSearchFilter FilterBlock="@FilterBlock" OnFilterBlockChanged="OnFilterBlockChanged" />

    <div class="flex-row d-flex">
        @{
            int index = 0;
            <span class="list-header elist-column @GetColumnClass(index++) @GetSortingHeaderClass(SortingModes.Name)" @onclick="SetNameSorting">Name [@DataStore.Monsters.Count]</span>
            <span class="list-header elist-column @GetColumnClass(index++) @GetSortingHeaderClass(SortingModes.Type)" @onclick="SetTypeSorting">Type</span>
            <span class="list-header elist-column @GetColumnClass(index++) @GetSortingHeaderClass(SortingModes.Source)" @onclick="SetSourceSorting">Source</span>
            <span class="list-header elist-column @GetColumnClass(index++) @GetSortingHeaderClass(SortingModes.ReferenceSize)" @onclick="SetRefSizeSorting">Reference Size</span>
        }
    </div>

    <ElementList>
        @{
            foreach (var monsterItem in DisplayMonster)
            {
                var monster = monsterItem;
                <MonsterListItem ListItem="monster" ColumnClasses="ColumnClasses" OnSelectedItem="OnItemSelected" />
            }
        }
    </ElementList>
</CascadingValue>

@code {
    public enum SortingModes
    {
        Name,
        Type,
        Source,
        ReferenceSize
    }

    [Parameter]
    public EventCallback<Monster> OnItemSelected { get; set; }

    public FilterBlock FilterBlock { get; set; } = new FilterBlock();

    private List<Monster> DisplayMonster { get; set; }

    [Parameter]
    public Monster SelectedMonster { get; set; }

    private SortingModes m_sortingMode = SortingModes.Name;
    public SortingModes SortingMode
    {
        get => m_sortingMode;
        set
        {
            if (m_sortingMode == value)
            {
                SortAscending = !SortAscending;
            }
            else
            {
                m_sortingMode = value;
                SortAscending = true;
            }

            SortList();
        }
    }

    public bool SortAscending
    {
        get; set;
    } = true;
    public int SortingMult => SortAscending ? 1 : -1;
    private string AscendingHeaderClass => SortAscending ? "ascending" : "descending";

    private string SortingHeaderClass = "active";
    private string GetSortingHeaderClass(SortingModes aMode)
    {
        if (SortingMode != aMode)
        {
            return string.Empty;
        }

        return $"{SortingHeaderClass} {AscendingHeaderClass}";
    }

    private string[] ColumnClasses = new string[] { "", "", "", "" };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DisplayMonster = new List<Monster>(DataStore.SortedMonsters);
    }

    private void OnFilterBlockChanged(FilterBlock aFilterBlock)
    {
        FilterBlock = aFilterBlock;
        RebuildList();
    }

    private void RebuildList()
    {
        DisplayMonster = DataStore.SortedMonsters
            .Where(
                mon =>
                {
                    bool state = true;

                    state &= (string.IsNullOrEmpty(FilterBlock.Name) || mon.Name.ToLower().Contains(FilterBlock.Name.ToLower()));
                    state &= (string.IsNullOrEmpty(FilterBlock.Source) || mon.PrimarySource.ToLower().Contains(FilterBlock.Source.ToLower()));
                    state &= (string.IsNullOrEmpty(FilterBlock.CreatureType) || mon.CreatureTypeRef.ToLower().Contains(FilterBlock.CreatureType.ToLower()));

                    return state;
                }
            )
            .ToList();

        SortList();

        StateHasChanged();
    }

    private string GetColumnClass(int index)
    {
        if (ColumnClasses == null || index > ColumnClasses.Length) return string.Empty;

        return ColumnClasses[index];
    }

    private void SetNameSorting()
    {
        SortingMode = SortingModes.Name;
    }

    private void SetSourceSorting()
    {
        SortingMode = SortingModes.Source;
    }

    private void SetTypeSorting()
    {
        SortingMode = SortingModes.Type;
    }

    private void SetRefSizeSorting()
    {
        SortingMode = SortingModes.ReferenceSize;
    }

    private void SortList()
    {
        switch (SortingMode)
        {
            case SortingModes.Name:
                DisplayMonster.Sort((a, b) => a.Name.CompareTo(b.Name) * SortingMult);
                break;
            case SortingModes.Type:
                DisplayMonster.Sort((a, b) => a.CreatureTypeRef.CompareTo(b.CreatureTypeRef) * SortingMult);
                break;
            case SortingModes.Source:
                DisplayMonster.Sort((a, b) => a.PrimarySource.CompareTo(b.PrimarySource) * SortingMult);
                break;
            case SortingModes.ReferenceSize:
                DisplayMonster.Sort((a, b) => a.ReferenceCardSize.CompareTo(b.ReferenceCardSize) * SortingMult);
                break;
        }

        StateHasChanged();
    }
}
